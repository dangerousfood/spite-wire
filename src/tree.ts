// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "tree.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Uint256
 */
export interface Uint256 {
    /**
     * @generated from protobuf field: fixed64 part1 = 1;
     */
    part1: bigint;
    /**
     * @generated from protobuf field: fixed64 part2 = 2;
     */
    part2: bigint;
    /**
     * @generated from protobuf field: fixed64 part3 = 3;
     */
    part3: bigint;
    /**
     * @generated from protobuf field: fixed64 part4 = 4;
     */
    part4: bigint;
}
/**
 * @generated from protobuf message Bytes32
 */
export interface Bytes32 {
    /**
     * @generated from protobuf field: fixed64 part1 = 1;
     */
    part1: bigint;
    /**
     * @generated from protobuf field: fixed64 part2 = 2;
     */
    part2: bigint;
    /**
     * @generated from protobuf field: fixed64 part3 = 3;
     */
    part3: bigint;
    /**
     * @generated from protobuf field: fixed64 part4 = 4;
     */
    part4: bigint;
}
/**
 * @generated from protobuf message Leaf
 */
export interface Leaf {
    /**
     * @generated from protobuf field: Uint256 index = 1;
     */
    index?: Uint256;
    /**
     * @generated from protobuf field: Bytes32 leaf_hash = 2;
     */
    leafHash?: Bytes32;
}
/**
 * @generated from protobuf message Tree
 */
export interface Tree {
    /**
     * @generated from protobuf field: Bytes32 root = 1;
     */
    root?: Bytes32;
    /**
     * @generated from protobuf field: repeated Leaf leaves = 2;
     */
    leaves: Leaf[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Uint256$Type extends MessageType<Uint256> {
    constructor() {
        super("Uint256", [
            { no: 1, name: "part1", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "part2", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "part3", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "part4", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Uint256>): Uint256 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.part1 = 0n;
        message.part2 = 0n;
        message.part3 = 0n;
        message.part4 = 0n;
        if (value !== undefined)
            reflectionMergePartial<Uint256>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Uint256): Uint256 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 part1 */ 1:
                    message.part1 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part2 */ 2:
                    message.part2 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part3 */ 3:
                    message.part3 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part4 */ 4:
                    message.part4 = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Uint256, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 part1 = 1; */
        if (message.part1 !== 0n)
            writer.tag(1, WireType.Bit64).fixed64(message.part1);
        /* fixed64 part2 = 2; */
        if (message.part2 !== 0n)
            writer.tag(2, WireType.Bit64).fixed64(message.part2);
        /* fixed64 part3 = 3; */
        if (message.part3 !== 0n)
            writer.tag(3, WireType.Bit64).fixed64(message.part3);
        /* fixed64 part4 = 4; */
        if (message.part4 !== 0n)
            writer.tag(4, WireType.Bit64).fixed64(message.part4);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Uint256
 */
export const Uint256 = new Uint256$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bytes32$Type extends MessageType<Bytes32> {
    constructor() {
        super("Bytes32", [
            { no: 1, name: "part1", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "part2", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "part3", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "part4", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Bytes32>): Bytes32 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.part1 = 0n;
        message.part2 = 0n;
        message.part3 = 0n;
        message.part4 = 0n;
        if (value !== undefined)
            reflectionMergePartial<Bytes32>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bytes32): Bytes32 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 part1 */ 1:
                    message.part1 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part2 */ 2:
                    message.part2 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part3 */ 3:
                    message.part3 = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 part4 */ 4:
                    message.part4 = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bytes32, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 part1 = 1; */
        if (message.part1 !== 0n)
            writer.tag(1, WireType.Bit64).fixed64(message.part1);
        /* fixed64 part2 = 2; */
        if (message.part2 !== 0n)
            writer.tag(2, WireType.Bit64).fixed64(message.part2);
        /* fixed64 part3 = 3; */
        if (message.part3 !== 0n)
            writer.tag(3, WireType.Bit64).fixed64(message.part3);
        /* fixed64 part4 = 4; */
        if (message.part4 !== 0n)
            writer.tag(4, WireType.Bit64).fixed64(message.part4);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Bytes32
 */
export const Bytes32 = new Bytes32$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Leaf$Type extends MessageType<Leaf> {
    constructor() {
        super("Leaf", [
            { no: 1, name: "index", kind: "message", T: () => Uint256 },
            { no: 2, name: "leaf_hash", kind: "message", T: () => Bytes32 }
        ]);
    }
    create(value?: PartialMessage<Leaf>): Leaf {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Leaf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Leaf): Leaf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Uint256 index */ 1:
                    message.index = Uint256.internalBinaryRead(reader, reader.uint32(), options, message.index);
                    break;
                case /* Bytes32 leaf_hash */ 2:
                    message.leafHash = Bytes32.internalBinaryRead(reader, reader.uint32(), options, message.leafHash);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Leaf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Uint256 index = 1; */
        if (message.index)
            Uint256.internalBinaryWrite(message.index, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Bytes32 leaf_hash = 2; */
        if (message.leafHash)
            Bytes32.internalBinaryWrite(message.leafHash, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Leaf
 */
export const Leaf = new Leaf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tree$Type extends MessageType<Tree> {
    constructor() {
        super("Tree", [
            { no: 1, name: "root", kind: "message", T: () => Bytes32 },
            { no: 2, name: "leaves", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Leaf }
        ]);
    }
    create(value?: PartialMessage<Tree>): Tree {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leaves = [];
        if (value !== undefined)
            reflectionMergePartial<Tree>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tree): Tree {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Bytes32 root */ 1:
                    message.root = Bytes32.internalBinaryRead(reader, reader.uint32(), options, message.root);
                    break;
                case /* repeated Leaf leaves */ 2:
                    message.leaves.push(Leaf.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tree, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Bytes32 root = 1; */
        if (message.root)
            Bytes32.internalBinaryWrite(message.root, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Leaf leaves = 2; */
        for (let i = 0; i < message.leaves.length; i++)
            Leaf.internalBinaryWrite(message.leaves[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Tree
 */
export const Tree = new Tree$Type();
